#ifndef REP_SIMPLESWITCH_SOURCE_H
#define REP_SIMPLESWITCH_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class Project
{
    Q_GADGET

    Q_PROPERTY(int number READ number WRITE setNumber)
    Q_PROPERTY(QString customer READ customer WRITE setCustomer)
    Q_PROPERTY(QString role READ role WRITE setRole)
public:
    Project() : m_number(), m_customer(), m_role() {}
    explicit Project(int number, QString customer, QString role) : m_number(number), m_customer(customer), m_role(role) {}
    int number() const { return m_number; }
    void setNumber(int number) { if (number != m_number) { m_number = number; } }
    QString customer() const { return m_customer; }
    void setCustomer(QString customer) { if (customer != m_customer) { m_customer = customer; } }
    QString role() const { return m_role; }
    void setRole(QString role) { if (role != m_role) { m_role = role; } }
private:
    int m_number;
    QString m_customer;
    QString m_role;
};

inline bool operator==(const Project &left, const Project &right) Q_DECL_NOTHROW {
    return left.number() == right.number() && left.customer() == right.customer() && left.role() == right.role();
}
inline bool operator!=(const Project &left, const Project &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const Project &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, Project &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class Person
{
    Q_GADGET

    Q_PROPERTY(QString name READ name WRITE setName)
    Q_PROPERTY(int age READ age WRITE setAge)
    Q_PROPERTY(QString position READ position WRITE setPosition)
    Q_PROPERTY(QVector<Project> projects READ projects WRITE setProjects)
public:
    Person() : m_name(), m_age(), m_position(), m_projects() {}
    explicit Person(QString name, int age, QString position, QVector<Project> projects) : m_name(name), m_age(age), m_position(position), m_projects(projects) {}
    QString name() const { return m_name; }
    void setName(QString name) { if (name != m_name) { m_name = name; } }
    int age() const { return m_age; }
    void setAge(int age) { if (age != m_age) { m_age = age; } }
    QString position() const { return m_position; }
    void setPosition(QString position) { if (position != m_position) { m_position = position; } }
    QVector<Project> projects() const { return m_projects; }
    void setProjects(QVector<Project> projects) { if (projects != m_projects) { m_projects = projects; } }
private:
    QString m_name;
    int m_age;
    QString m_position;
    QVector<Project> m_projects;
};

inline bool operator==(const Person &left, const Person &right) Q_DECL_NOTHROW {
    return left.name() == right.name() && left.age() == right.age() && left.position() == right.position() && left.projects() == right.projects();
}
inline bool operator!=(const Person &left, const Person &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const Person &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, Person &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class SimpleSwitchSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "SimpleSwitch")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "602dba037e13f860cf4adb5af7f8c068ff37cf99")
    Q_PROPERTY(Person person READ person WRITE setPerson NOTIFY personChanged)

public:
    explicit SimpleSwitchSource(QObject *parent = nullptr) : QObject(parent)
    {
        qRegisterMetaType<QVector<Project>>();
        qRegisterMetaTypeStreamOperators<QVector<Project>>();
        qRegisterMetaType<Project>();
        qRegisterMetaTypeStreamOperators<Project>();
        qRegisterMetaType<Person>();
        qRegisterMetaTypeStreamOperators<Person>();
        qRegisterMetaType<Person>();
        qRegisterMetaTypeStreamOperators<Person>();

    }

public:
    ~SimpleSwitchSource() override = default;

    virtual Person person() const = 0;
    virtual void setPerson(Person person) = 0;

Q_SIGNALS:
    void personChanged(Person person);

public Q_SLOTS:
    virtual void pushPerson(Person person)
    {
        setPerson(person);
    }
    virtual void rep_to_source(Person clientPerson) = 0;
    virtual void source_to_rep() = 0;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};


class SimpleSwitchSimpleSource : public SimpleSwitchSource
{
    Q_OBJECT

public:
    explicit SimpleSwitchSimpleSource(QObject *parent = nullptr) : SimpleSwitchSource(parent)
    , m_person()
    {
    }

public:
    ~SimpleSwitchSimpleSource() override = default;

    Person person() const override { return m_person; }
    void setPerson(Person person) override
    {
        if (person != m_person) {
            m_person = person;
            Q_EMIT personChanged(m_person);
        }
    }

private:
    Person m_person;
};


template <class ObjectType>
struct SimpleSwitchSourceAPI : public SourceApiMap
{
    SimpleSwitchSourceAPI(ObjectType *object, const QString &name = QLatin1String("SimpleSwitch"))
        : SourceApiMap(), m_name(name)
    {
        Q_UNUSED(object);
        m_enums[0] = 0;
        m_properties[0] = 1;
        m_properties[1] = QtPrivate::qtro_property_index<ObjectType>(&ObjectType::person, static_cast<Person (QObject::*)()>(0),"person");
        QtPrivate::qtro_method_test<ObjectType>(&ObjectType::personChanged, static_cast<void (QObject::*)()>(0));
        m_signals[0] = 1;
        m_signals[1] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::personChanged, static_cast<void (QObject::*)(Person)>(0),m_signalArgCount+0,&m_signalArgTypes[0]);
        m_methods[0] = 3;
        m_methods[1] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::pushPerson, static_cast<void (QObject::*)(Person)>(0),"pushPerson(Person)",m_methodArgCount+0,&m_methodArgTypes[0]);
        m_methods[2] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::rep_to_source, static_cast<void (QObject::*)(Person)>(0),"rep_to_source(Person)",m_methodArgCount+1,&m_methodArgTypes[1]);
        m_methods[3] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::source_to_rep, static_cast<void (QObject::*)()>(0),"source_to_rep()",m_methodArgCount+2,&m_methodArgTypes[2]);
    }

    QString name() const override { return m_name; }
    QString typeName() const override { return QStringLiteral("SimpleSwitch"); }
    int enumCount() const override { return m_enums[0]; }
    int propertyCount() const override { return m_properties[0]; }
    int signalCount() const override { return m_signals[0]; }
    int methodCount() const override { return m_methods[0]; }
    int sourceEnumIndex(int index) const override
    {
        if (index < 0 || index >= m_enums[0])
            return -1;
        return m_enums[index+1];
    }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= m_properties[0])
            return -1;
        return m_properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= m_signals[0] || paramIndex < 0 || paramIndex >= m_signalArgCount[sigIndex])
            return -1;
        return m_signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= m_methods[0] || paramIndex < 0 || paramIndex >= m_methodArgCount[methodIndex])
            return -1;
        return m_methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return m_properties[1];
        }
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return 0;
        }
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("personChanged(Person)");
        }
        return QByteArrayLiteral("");
    }
    QList<QByteArray> signalParameterNames(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_signals[index + 1]).parameterNames();
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("pushPerson(Person)");
        case 1: return QByteArrayLiteral("rep_to_source(Person)");
        case 2: return QByteArrayLiteral("source_to_rep()");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    QList<QByteArray> methodParameterNames(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_methods[index + 1]).parameterNames();
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        case 1: return QByteArrayLiteral("void");
        case 2: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"602dba037e13f860cf4adb5af7f8c068ff37cf99"}; }

    int m_enums[1];
    int m_properties[2];
    int m_signals[2];
    int m_methods[4];
    const QString m_name;
    int m_signalArgCount[1];
    const int* m_signalArgTypes[1];
    int m_methodArgCount[3];
    const int* m_methodArgTypes[3];
};

QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_SIMPLESWITCH_SOURCE_H
