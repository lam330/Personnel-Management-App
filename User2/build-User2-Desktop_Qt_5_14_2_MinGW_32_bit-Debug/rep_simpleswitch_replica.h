#ifndef REP_SIMPLESWITCH_REPLICA_H
#define REP_SIMPLESWITCH_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>


class Project
{
    Q_GADGET

    Q_PROPERTY(int number READ number WRITE setNumber)
    Q_PROPERTY(QString customer READ customer WRITE setCustomer)
    Q_PROPERTY(QString role READ role WRITE setRole)
public:
    Project() : m_number(), m_customer(), m_role() {}
    explicit Project(int number, QString customer, QString role) : m_number(number), m_customer(customer), m_role(role) {}
    int number() const { return m_number; }
    void setNumber(int number) { if (number != m_number) { m_number = number; } }
    QString customer() const { return m_customer; }
    void setCustomer(QString customer) { if (customer != m_customer) { m_customer = customer; } }
    QString role() const { return m_role; }
    void setRole(QString role) { if (role != m_role) { m_role = role; } }
private:
    int m_number;
    QString m_customer;
    QString m_role;
};

inline bool operator==(const Project &left, const Project &right) Q_DECL_NOTHROW {
    return left.number() == right.number() && left.customer() == right.customer() && left.role() == right.role();
}
inline bool operator!=(const Project &left, const Project &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const Project &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, Project &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class Person
{
    Q_GADGET

    Q_PROPERTY(QString name READ name WRITE setName)
    Q_PROPERTY(int age READ age WRITE setAge)
    Q_PROPERTY(QString position READ position WRITE setPosition)
    Q_PROPERTY(QVector<Project> projects READ projects WRITE setProjects)
public:
    Person() : m_name(), m_age(), m_position(), m_projects() {}
    explicit Person(QString name, int age, QString position, QVector<Project> projects) : m_name(name), m_age(age), m_position(position), m_projects(projects) {}
    QString name() const { return m_name; }
    void setName(QString name) { if (name != m_name) { m_name = name; } }
    int age() const { return m_age; }
    void setAge(int age) { if (age != m_age) { m_age = age; } }
    QString position() const { return m_position; }
    void setPosition(QString position) { if (position != m_position) { m_position = position; } }
    QVector<Project> projects() const { return m_projects; }
    void setProjects(QVector<Project> projects) { if (projects != m_projects) { m_projects = projects; } }
private:
    QString m_name;
    int m_age;
    QString m_position;
    QVector<Project> m_projects;
};

inline bool operator==(const Person &left, const Person &right) Q_DECL_NOTHROW {
    return left.name() == right.name() && left.age() == right.age() && left.position() == right.position() && left.projects() == right.projects();
}
inline bool operator!=(const Person &left, const Person &right) Q_DECL_NOTHROW {
    return !(left == right);
}

inline QDataStream &operator<<(QDataStream &ds, const Person &obj) {
    QtRemoteObjects::copyStoredProperties(&obj, ds);
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, Person &obj) {
    QtRemoteObjects::copyStoredProperties(ds, &obj);
    return ds;
}


class SimpleSwitchReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "SimpleSwitch")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "53fdd2dba836bd9b4c009219637ff126eb686f48")
    Q_PROPERTY(Person person READ person NOTIFY personChanged)
    Q_PROPERTY(int ordinal READ ordinal NOTIFY ordinalChanged)

public:
    SimpleSwitchReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
        qRegisterMetaType<Person>();
        qRegisterMetaTypeStreamOperators<Person>();
        qRegisterMetaType<QVector<Project>>();
        qRegisterMetaTypeStreamOperators<QVector<Project>>();
        qRegisterMetaType<Project>();
        qRegisterMetaTypeStreamOperators<Project>();
        qRegisterMetaType<Person>();
        qRegisterMetaTypeStreamOperators<Person>();
        qRegisterMetaType<QRemoteObjectPendingCall>();
        qRegisterMetaType<QRemoteObjectPendingReply<void>>();
        if (!QMetaType::hasRegisteredConverterFunction<QRemoteObjectPendingReply<void>, QRemoteObjectPendingCall>())
            QMetaType::registerConverter<QRemoteObjectPendingReply<void>, QRemoteObjectPendingCall>();

    }

private:
    SimpleSwitchReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
    {
        initializeNode(node, name);
    }

    void initialize() override
    {
        SimpleSwitchReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(2);
        properties << QVariant::fromValue(Person());
        properties << QVariant::fromValue(int());
        setProperties(properties);
    }

public:
    ~SimpleSwitchReplica() override = default;

    Person person() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<Person>()) {
            qWarning() << "QtRO cannot convert the property person to type Person";
        }
        return variant.value<Person >();
    }

    int ordinal() const
    {
        const QVariant variant = propAsVariant(1);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property ordinal to type int";
        }
        return variant.value<int >();
    }


Q_SIGNALS:
    void personChanged(Person person);
    void ordinalChanged(int ordinal);

public Q_SLOTS:
    void pushPerson(Person person)
    {
        static int __repc_index = SimpleSwitchReplica::staticMetaObject.indexOfSlot("pushPerson(Person)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(person);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void pushOrdinal(int ordinal)
    {
        static int __repc_index = SimpleSwitchReplica::staticMetaObject.indexOfSlot("pushOrdinal(int)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(ordinal);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void source_to_rep()
    {
        static int __repc_index = SimpleSwitchReplica::staticMetaObject.indexOfSlot("source_to_rep()");
        QVariantList __repc_args;
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void source_to_rep2()
    {
        static int __repc_index = SimpleSwitchReplica::staticMetaObject.indexOfSlot("source_to_rep2()");
        QVariantList __repc_args;
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_SIMPLESWITCH_REPLICA_H
